name: Test Variants Action

on: [push, workflow_dispatch]

jobs:
  initialize-variants:
    runs-on: ubuntu-latest
    name: Initialize Variants Arrays
    outputs:
      VARIANTS-LATEST: ${{ steps.mk-arrays.outputs.VARIANTS-LATEST }}
      VARIANTS-NO-LATEST: ${{ steps.mk-arrays.outputs.VARIANTS-NO-LATEST }}
      VARIANTS-SINGLE: ${{ steps.mk-arrays.outputs.VARIANTS-SINGLE }}
    steps:
      - id: mk-arrays
        run: |
          declare -a variants
          variants=( latest v1.0 v1.0.9 v1.0.9-main )

          declare -a variants_no_latest
          variants_no_latest=( v1.0 v1.0.9 v1.0.9-main )

          declare -a single_variant
          single_variant=( latest )

          echo "::set-output name=VARIANTS-LATEST::$variants"
          echo "::set-output name=VARIANTS-NO-LATEST::$variants_no_latest"
          echo "::set-output name=VARIANTS-SINGLE::$single_variant"

  test-variants-with-latest:
    runs-on: ubuntu-latest
    name: Test Variants Action with Latest Tag
    continue-on-error: true
    needs: initialize-variants
    env:
      VARIANTS: ${{ needs.initialize-variants.outputs.VARIANTS }}
    outputs:
      RESULT: ${{ steps.variants-latest.outputs.result }}
    steps:
      - id: variants-latest
        uses: jessenich/docker-variants-action@main
        with:
          variants-array: ${{ env.VARIANTS }}
          label-name: test.label
          increment-labels: true
          auto-append-latest: true

      - name: Test variants-latest
        env:
          labels: ${{ steps.variants-latest.outputs.labels }}
          count: ${{ steps.variants-latest.outputs.count }}
        run: |
          jobresult= ;

          if "${labels[1]}" -ne "v1.0"; then
            echo "Incorrect label detected at index 1";
            echo "Expected 'v1.0', got ${labels[1]} from ${labels[*]}";
            jobresult="fail"
          elif "${count}" -ne 4; then
            echo "Incorrect return count";
            echo "Count: ${count}, Expected: 4";
            jobresult="fail"
          else
            echo "All checks succeeded, job passed."
            jobresult="success"
          fi

          if "$jobresult" -eq "success"; then
            echo "::set-output name=result::$jobresult";
            exit 0;
          elif "$jobresult" -eq "fail"; then
            echo "::set-output name=result::$jobresult";
            exit 1;
          else
            echo "Unknown error occurred. Review logs."
            exit 2;
          fi

  test-variants-no-latest:
    runs-on: ubuntu-latest
    name: Test Variants Action without Latest Tag
    continue-on-error: true
    needs: initialize-variants
    env:
      VARIANTS: ${{ needs.initialize-variants.outputs.VARIANTS-NO-LATEST }}
    outputs:
      RESULT: ${{ steps.variants-no-latest.outputs.result }}
    steps:
      - id: variants-no-latest
        uses: jessenich/docker-variants-action@main
        with:
          variants-array: ${{ env.VARIANTS }}
          label-name: test.label
          increment-labels: true
          auto-append-latest: true

      - name: Test variants-no-latest
        env:
          labels: ${{ steps.variants-no-latest.outputs.labels }}
          count: ${{ steps.variants-no-latest.outputs.count }}
        run: |
          jobresult= ;

          if "${labels[1]}" -ne "v1.0.9"; then
            echo "Incorrect label detected at index 1";
            echo "Expected 'v1.0.9', got ${labels[1]}" from ${labels[*]}";
            jobresult="fail"
          elif "${count}" -ne 3; then
            echo "Incorrect return count";
            echo "Count: ${count}, Expected: 3";
            jobresult="fail"
          else
            echo "All checks succeeded, job passed."
            jobresult="success"
          fi

          if "$jobresult" -eq "success"; then
            echo "::set-output name=result::$jobresult";
            exit 0;
          elif "$jobresult" -eq "fail"; then
            echo "::set-output name=result::$jobresult";
            exit 1;
          else
            echo "Unknown error occurred. Review logs."
            exit 2;
          fi

  test-variants-single:
    runs-on: ubuntu-latest
    name: Test Variants Action with Single Tag
    continue-on-error: true
    needs: initialize-variants
    env:
      VARIANTS: ${{ needs.initialize-variants.outputs.VARIANTS-SINGLE }}
    outputs:
      result: ${{ steps.variants-single.outputs.result }}
    steps:
      - id: variants-single
        uses: jessenich/docker-variants-action@main
        with:
          variants-array: ${{ env.VARIANTS }}
          label-name: test.label
          increment-labels: true
          auto-append-latest: false

      - name: Test variants-no-latest
        env:
          labels: ${{ steps.variants-latest.outputs.labels }}
          count: ${{ steps.variants-single.outputs.count }}
        run: |
          jobresult= ;

          if "${labels[0]}" -ne "latest"; then
            echo "Incorrect label detected at index 0";
            echo "Labels: ${labels[*]}";
            jobresult="fail"
          elif "${count}" -ne 1; then
            echo "Incorrect return count";
            echo "Count: ${count}, Expected: 1";
            jobresult="fail"
          else
            echo "All checks succeeded, job passed."
            jobresult="success"
          fi

          if "$jobresult" -eq "success"; then
            echo "::set-output name=result::$jobresult";
            exit 0;
          elif "$jobresult" -eq "fail"; then
            echo "::set-output name=result::$jobresult";
            exit 1;
          else
            echo "Unknown error occurred. Review logs."
            exit 2;
          fi

  assert-test-results:
    runs-on: ubuntu-latest
    name: Assert Results
    needs:
      - initialize-variants
      - test-variants-with-latest
      - test-variants-no-latest
      - test-variants-single
    continue-on-error: false
    env:
      with-latest: ${{ needs.test-variants-with-latest.outputs.RESULT }}
      no-latest: ${{ needs.test-variants-no-latest.outputs.RESULT }}
      single: ${{ needs.test-variants-single.outputs.RESULT }}
    steps:
      - name: Assert
        id: assert
        env:
          with_latest: ${{ env.with-latest }}
          no-latest: ${{ env.no-latest}}
          single:  ${{ env.single }}
        run: |
          if "$with_latest" -eq "fail" || "$no-latest" -eq "fail" || "$single" -eq "fail"; then
            exit 1;
          else
            exit 0;
          fi
